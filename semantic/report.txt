基本功能：
1.能分析以下几类语句，并生成中间代码（三地址指令和四元式形式）： 
声明语句（变量声明）；表达式及赋值语句分支语句：if_then_else ；循环语句：do_while 
2.具备语义错误处理能力，包括变量或函数重复声明、变量或函数引用前未声明、运算符和运算分量之间的类型不匹配（如整型变量与数组变量相加减）等错误，能准确给出错误所在位置，并采用可行的错误恢复策略。输出的错误提示信息格式如下：
Error at Line [行号]：[说明文字]
3. 额外功能，能实现自动类型转换，将int型和float型运算的时，将int型自动转化为Float型；对非数组类型变量进行访问数组引用出错。

文法设计
语义动作见parser/README.md

系统设计
(1) 系统概要设计 见semantic/semantic.png
其中，parser为语法分析器的主类，类似之前的语法分析；SymbolBoard为符号表类，其中主要的符号表条目为SymbolItem，为一般标识符的符号表条目；
另一种符号表条目为ProcSymbolItem，其为函数声明的符号表条目，在其中记录着函数用于记录局部变量的符号表；InterCode为中间代码类，用于语义动作中生成局部代码的操作。

(2) 系统详细设计
a. 核心数据结构，在符号表中使用Map记录标识符与其对应的符号表条目；在Parser中使用栈记录调用关系，将offset和之前的符号表在声明函数时进行压栈处理。
b. 主要函数说明，在语义分析部分，由于使用的是仅有S属性的自底向上翻译方案，所以在规约之后进行语义动作即可，基于此所有的语义动作都定义在reduce函数中进行。
reduce函数的功能为进行LR(1)语法分析，规约出产生式，并在有相应语义动作的规约之后进行，并进行语法的错误处理和恢复，以及语义的错误提示。
c. reduce函数流程图待完善。

系统实现及结果分析
(1) 嵌套符号表的记录，对于子过程而言，其可以在压栈时简单处理即可记录父过程的符号表；而对于子过程的符号表，则需要在父过程的符号表中显式记录子过程的名字和符号表。因此，修改了最初的SymbolItem设计，新增了ProcSymbolItem。
(2) 语义分析结果
0 : t1 = 1 + 2
1 : a = t1
2 : c = 10
3 : t2 = c + 1
4 : b = t2
5 : t3 = c * 2
6 : d = t3
7 : e = 0
8 : y = 999
9 : z = 100
10 : if a < b goto 12
11 : goto 20
12 : if c < d goto 14
13 : goto 17
14 : t4 = y + z
15 : x = t4
16 : goto 10
17 : t5 = a + b
18 : x = t5
19 : goto 10
20 : t6 = d + e
21 : t7 = c * t6
22 : t8 = b + t7
23 : a = t8
24 : if a > b goto 26
25 : goto 27
26 : c = d
27 : t9 = i + 1
28 : i = t9
29 : t10 = i * 12
30 : t11 = j * 4
31 : t12 = t10 + t11
32 : t13 = c + list[t12]
33 : d = t13
34 : t14 = i * 12
35 : t15 = j * 4
36 : t16 = t14 + t15
37 : list [ t16 ] = c
38 : t17 = h * (float) c
39 : d = t17
40 : t18 = c + 10
41 : a = t18
(3)符号表
<a, int, 1, 0>
<b, int, 3, 4>
<c, int, 4, 8>
<d, int, 7, 12>
<e, int, 9, 16>
<h, float, 34, 64>
<i, int, 31, 56>
<j, int, 32, 60>
<list, int[2][3], 29, 32>
<function, proc, 41, 72>
function Table:
{
<a, int, 41, 0>
<c, int, 41, 4>
<d, int, 43, 8>
}
<x, int, 11, 20>
<y, int, 12, 24>
<z, int, 14, 28>
(4) 错误报告
Error at line[30], c is defined early.
Error at line[33], d is defined early.
Error at line[40], c type error
Error at line[41], proc defined again
